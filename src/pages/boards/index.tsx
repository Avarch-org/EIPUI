import {
    Box,
    Heading,
    Table,
    Thead,
    Tbody,
    Tr,
    Th,
    Td,
    TableContainer,
    Link as LI,
    Spinner,
    Text,
    Flex,
    Button,
    useColorModeValue
  } from "@chakra-ui/react";
  import React, { useEffect, useState } from "react";
  import AllLayout from "@/components/Layout";
  import axios from "axios";
  
  // Helper function to extract PR number from URL
  const extractPrNumber = (url: string) => {
    const prMatch = url.match(/\/pull\/(\d+)/);
    return prMatch ? prMatch[1] : "N/A";
  };
  
  const DashboardPage = () => {
    const [eipData, setEipData] = useState([]);
    const [ercData, setErcData] = useState([]);
    const [isLoading, setIsLoading] = useState(true);
    const [hasError, setHasError] = useState(false);
    const [activeTab, setActiveTab] = useState('EIPs'); // Default to 'EIPs'
  
    // Fetch data from the API
    useEffect(() => {
      const fetchData = async () => {
        try {
          const response = await axios.get("/api/all_board");
          setEipData(response.data.eips || []);
          setErcData(response.data.ercs || []);
          setIsLoading(false);
        } catch (error) {
          console.error("Error fetching data:", error);
          setHasError(true);
          setIsLoading(false);
        }
      };
  
      fetchData();
    }, []);
  
    if (isLoading) {
      return (
        <AllLayout>
          <Box textAlign="center" mt="20">
            <Spinner size="xl" color="teal.500" />
          </Box>
        </AllLayout>
      );
    }
  
    if (hasError) {
      return (
        <AllLayout>
          <Box textAlign="center" mt="20">
            <Text fontSize="lg" color="red.500">
              Failed to load data.
            </Text>
          </Box>
        </AllLayout>
      );
    }
  
    // Determine which data to show based on the active tab
    const displayedData = activeTab === 'EIPs' ? eipData : ercData;
  
    return (
      <AllLayout>
        {/* Tab selection for EIPs and ERCs */}
        <Box  padding={8} mt={8} ml={8} mr={8} mb={1}>
            <Box
                padding={4}
                bg={useColorModeValue("blue.50", "gray.700")}
                borderRadius="md"
                marginBottom={8}
                >
                <Heading
                    as="h3"
                    size="lg"
                    marginBottom={4}
                    color={useColorModeValue("#3182CE", "blue.300")}
                >
                    What is EIP Board tool?
                </Heading>
                <Text
                fontSize="md"
                marginBottom={2}
                color={useColorModeValue("gray.800", "gray.200")}
                >
                <strong>Data: </strong> This list of EIP/ERC pull requests is the rough order in which they will be reviewed. It begins on the top with the pull request waiting the longest for an Editor response. It is generated by <a href="https://github.com/gaudren/eip-board" target="_blank" rel="noopener noreferrer" style={{ color: "darkblue", textDecoration: "underline" }}>EIP-Board</a>.
                </Text>

                <Text
  fontSize="md"
  marginBottom={2}
  color={useColorModeValue("gray.800", "gray.200")}
>
  <strong>Queries: </strong>Any issues or feature requests for this tool should be directed <a href="https://github.com/gaudren/eip-board/issues" target="_blank" rel="noopener noreferrer" style={{ color: "darkblue", textDecoration: "underline" }}>here</a>.
  </Text>

                </Box>
        
        <Flex justify="center" mb={8}>
          <Button
            colorScheme="blue"
            onClick={() => setActiveTab('EIPs')}
            isActive={activeTab === 'EIPs'}
            mr={4}
          >
            EIPs
          </Button>
          <Button
            colorScheme="blue"
            onClick={() => setActiveTab('ERCs')}
            isActive={activeTab === 'ERCs'}
          >
            ERCs
          </Button>
        </Flex>
  
        {/* Heading based on active tab */}
        <Box
          ml={2}
          mr={2}
          border="1px solid #e2e8f0"
          borderRadius="10px 10px 10px 10px"
          boxShadow="lg"
          bg="#171923" // Dark mode background
        >
          <Heading as="h2" size="lg" mt={4} mb={4} textAlign="center" color={"#fff"}>
            {activeTab} BOARD
          </Heading>
  
          {/* Scrollable Table */}
          <TableContainer
            minHeight="500px"
            overflowY="auto"
            overflowX="auto"
            borderWidth="1px"
            borderRadius="md"
            bg="#1A202C" // Dark mode table background
            p={4}
            boxShadow="md"
            maxHeight="900px"
          >
            <Table variant="striped" colorScheme="blue" size="lg">
              <Thead bg="#2D3748">
                <Tr>
                  <Th style={{ color: "#fff", textAlign: "center" }}>Serial Number</Th>
                  <Th style={{ color: "#fff", textAlign: "center" }}>PR Number</Th>
                  <Th style={{ color: "#fff", textAlign: "center" }}>PR Link</Th>
                </Tr>
              </Thead>
              <Tbody>
                {displayedData.map((item: any, index: number) => (
                  <Tr
                    key={item._id}
                    style={{
                        backgroundColor: index % 2 === 0 ? "#1E2A38" : "#2A3C4E", // Lighter alternating colors for better contrast
                        color: "#E2E8F0", 
                    }}
                  >
                    <Td style={{ textAlign: "center",  color: useColorModeValue("black", "white"), }}>
                      {index + 1}
                    </Td>
                    <Td style={{ textAlign: "center",  color: useColorModeValue("black", "white"), }}>
                      {extractPrNumber(item.url)}
                    </Td>
                    <Td style={{ textAlign: "center" }}>
                      <LI href={item.url} isExternal style={{ color: "teal" }}>
                        {item.url}
                      </LI>
                    </Td>
                  </Tr>
                ))}
              </Tbody>
            </Table>
          </TableContainer>
        </Box>
        </Box>
      </AllLayout>
    );
  };
  
  export default DashboardPage;
  